=== LDAP Provider ===

==== Functionality ====

Imports information about users, groups, and organizational units from an LDAP server. 
The user information includes account name (sAMAccountName), LDAP identifier (userPrincipalName), user's address, e-mail, phone number, etc.
For groups and organizational units, names and membership information is included. 

The provider allows customization of mappings, so that chosen LDAP attributes can be added and mapped to the chosen properties in the RDF data store.

Go back to [[ Help:Providers | Providers ]].

==== Configuration Settings ====

{| class="sortable wikitable" 
|-
!Parameter
!Description
!Required
|-
| Username
| User name of the LDAP server administrator. Used to connect to the server and retrieve information for "all" users.
| 
|-
| Password
| Password of the LDAP administrator account.
| 
|-
| host
| Hostname of the LDAP server. 
| &#10004;
|-
| port
| Port of the LDAP server. Defaults to 389. 
| 
|-
| root
| Root-node below which user information is searched for. Typically something like o=<org>. 
| &#10004;
|-
| pageSize
| Number of search results returned in one page from the LDAP server. Must not be greater than the maximal number of results returned by the server in one request. Default value: 1000.  
| 
|-
| userConf
| Configuration for the user object class
| 
|-
| groupConf
| Configuration for the group object class
| 
|-
| organizationalUnitConf
| Configuration for organizational unit object class
| 
|}

==== Example ====

The LDAPProvider is simple to set up as usual this process starts by navigating to Admin:Providers and selecting 'LDAPProvider' from the list of providers.
The figure below shows an example configuration, and the following subsections explain the meaning of available parameters.

<img src="../images/help/LDAPProvider.png" width="700px" />

==== Top-level properties ====
There are several fields that must be filled in including the usual ''Identifier'' and ''Poll interval'' fields. These can be filled in with any valid identifier and integer respectively: e.g., in our example the identifier is 'providerId' (which will also serve as a source reference for imported data) and the poll interval is 0 (which means that the provider will not run automatically, but only on the user request). If the LDAP data in the system has to be updated regularly, then the ''Poll interval'' value must specify the update interval in minutes. 

The two important fields that must be filled in are ''host'' and ''root''.  The value for ''host'' must be the URL of the LDAP server that you want the information to be extracted from: for example, if your host is called "my.ldap.host" the value of server should be "ldap://my.ldap.host". Optionally, if your LDAP server listens on a custom port (other than the default) this can be defined in ''port'', the default value for this is 389.

''root'' is the root node under which the provider will search and extract information from. In our example, the root node is identified as 'dc=myhost,dc=corp'.

The ''Username'' and ''Password'' field values are used as the login credentials to access the LDAP server and import the relevant data.

Finally, the ''pageSize'' attribute is used to control the multi-paged query results returned by the LDAP server. Normally, the LDAP servers return up to 1000 results for a single query request and multi-paged processing is required for those queries which exceed this threshold. The value of the ''pageSize'' parameter determines the number of results returned in a single page and must be less or equal that the maximum result set size threshold specified for the LDAP server. The default value for this parameter is 1000.

==== Object class configuration ==== 

There are three types of LDAP objects, for which information can be imported to the database: users, groups, and organizational units. For each of these object types, different properties can be imported. For each object type, the provider configuration contains a separate ''object class configuration'' structure: 
* ''userConf'' for users
* ''groupConf'' for groups
* ''organizationalUnitConf'' for organizational units

Each of these configuration structures has the following attributes:
{| class="sortable wikitable" 
|-
!Parameter
!Description
!Required
|-
| enableDefaultMapping
| Use the provider default attribute mapping as a basis for extraction. Defaults to false.
| 
|-
| root
| Root node below which information about specific object class is searched for (overrides the root node specified for the whole provider). Typically something like cn=myhost. Empty by default.
| 
|-
| idRule
| Rule specifying which namespace and which attribute value is used to generate instance IDs. Empty by default.
| 
|-
| objectClassType
| The type used for objects of the object class. foaf:Person, foaf:Group, and foaf:Organization, depending on the object class.
| 
|-
| attributeMapping
| Mapping of attributes to URIs. 
| 
|}

The flag ''enableDefaultMapping'' specifies whether a pre-defined set of default attributes should be imported for objects of the corresponding type. If this flag is set to ''false'' (which is the default case), no information is imported except for the attributes explicitly specified in the ''attributeMappings'' settings. As the initial value for this parameter is 'false', the LDAP provider does not import any data by default.
If this parameter is set to 'true', the provider imports a set of specified attributes for each corresponding class and saves them as RDF property values.
Depending on the object class, the LDAP Provider imports the following LDAP attributes. Note that in some cases one LDAP attribute is mapped to a property path (property1 X property2), i.e., two statements are added to the dataset: <nowiki>[userId, property1, intermediateObject], [intermediateObject, property2, attributeValue]</nowiki>.

{| class="sortable wikitable" 
|-
!LDAP attribute
!RDF property(ies)
|-
|colspan="2"|User
|-
|displayName
|rdfs:label
|-
|description
|rdfs:comment
|-
|givenName
|foaf:firstName
|-
|sn
|foaf:lastName
|-
|distinuishedName
|ldap:distinguishedName
|-
|sAMAccountName
|ldap:sAMAccountName
|-
|userPrincipalName
|ldap:userPrincipalName
|-
|mail
|foaf:mbox
|-
|telephoneNumber
|foaf:phone
|-
|mobile
|foaf:phone
|-
|company
|vcard:organizationName
|-
|department
|vcard:organizationalUnitName
|-
|c
|vcard:hasAddress X vcard:country
|-
|l
|vcard:hasAddress X vcard:locality
|-
|postalCode
|vcard:hasAddress X vcard:postalCode
|-
|st
|vcard:hasAddress X vcard:region
|-
|streetAddress
|vcard:hasAddress X vcard:streetAddress
|-
|sAMAccountType
|ldap:sAMAccountType	
|-
|whenChanged
|ldap:whenChanged
|-
|whenCreated
|ldap:whenCreated
|-
|pwdLastSet
|ldap:pwdLastSet
|-
|accountExpires
|ldap:accountExpires
|-
|lastLogoff
|ldap:lastLogoff
|-
|lastLogon
|ldap:lastLogon	
|-
|uSNChanged
|ldap:uSNChanged
|-
|uSNCreated
|ldap:uSNCreated
|-
|memberOf
|foaf:member
|-
|colspan="2"|Group/Organizational Unit
|-
|name
|rdfs:label
|-
|distinguishedName
|ldap:distinguishedName
|-
|uSNChanged
|ldap:uSNChanged
|-
|uSNCreated
|ldap:uSNCreated
|-
|whenChanged
|ldap:whenChanged
|-
|whenCreated
|ldap:whenCreated
|}

In the example configuration above, the provider imports default data about users and groups. 

In each object class configuration, the ''root'' parameter can be specified to override the top-level ''root'' value. This is sometimes needed if objects of different types should be imported from different nodes in the LDAP tree. For example, one can require all groups and organizational units, but only the users of a certain department, which have access to the system. 

For each LDAP object record (user, group, or organizational unit) the provider creates one instance in the system database. The URI of the instance is constructed based on the ''idRule'' parameter. The ''idRule'' parameter defines two settings: 
* ''idNamespace'': the namespace of the URIs created for LDAP objects of the corresponding type.
* ''idAttribute'': the LDAP attribute, whose value would be used as the local name part of the URI.
By default, the ''sAMAccountName'' LDAP attribute (user login name) is used as the local name for the user objects and ''distinguishedName'' is used for groups and organizational units. The system-default namespace ("<nowiki>http://www.fluidops.com/</nowiki>") is used if no other is specified explicitly. In the example above, the "<nowiki>http://www.example.org/</nowiki>" namespace was selected for LDAP user objects, and the local names are assigned based on the values of the ''userPrincipalName'' LDAP attribute, so, for instance, if the domain name is ''myhost.corp'' and the login name of a user is "myusername", the URI of its instance will become "<nowiki>http://www.example.org/myusername@myhost.corp</nowiki>".

For each imported instance of the selected object type, its 
class in the ontology would be determined by the value of the ''objectClassType'' attribute. By default, objects will be assigned to the class "foaf:Person" (users), "foaf:Group" (groups), and "foaf:Organization" (organizational units). 

==== Custom attribute mappings ====

If the default set of attributes and properties is not fully suitable (e.g., additional attributes need to be imported, different properties should be used for some attributes, or some of the default attributes should not be imported) then the ''attributeMapping'' parameter has to be specified to override the default settings. 

Each value of the ''attributeMapping'' parameter represents a substructure with three elements:
* ''attribute'': the name of the LDAP attribute.
* ''property'': the URI of the property which will be used to store the values of the LDAP attribute in the RDF triple store.
* ''mappingType'': the type of the mapping, specifying to which datatype the attribute value should belong.

For instance, in the figure above it is shown how to import an additional attribute ''badPwdTime'': you need to specify the LDAP attribute, the corresponding RDF property, and its datatype: "LDAP_TIMESTAMP" implies that the LDAP values should be interpreted as timestamps.

There are five possible values of the ''mappingType'' parameter which can be chosen:
* URI: the value of the LDAP attribute will be converted into a URI, which will become an object of the specified ''property''.
* INVERSE_URI: the value of the LDAP attribute will be converted into a URI, however, the direction of the RDF relation will be reversed (the value of the LDAP attribute will become the subject of the property, while the URI of the user, group, or organizational unit will become its object).
* LITERAL: the value of the LDAP attribute will be converted into a string literal (without explicit XSD datatype assigning).
* LDAP_TIMESTAMP: the value of the LDAP attribute will be converted into a timestamp literal.
* LDAP_DATE: the value of the LDAP attribute will be converted into a date literal.

Creating a custom attribute mapping for one of the attributes imported by default (see the list above) will override the default settings. Creating the mapping, but leaving the ''property'' field empty will tell the provider that the value of the attribute should not be imported into the triple store.