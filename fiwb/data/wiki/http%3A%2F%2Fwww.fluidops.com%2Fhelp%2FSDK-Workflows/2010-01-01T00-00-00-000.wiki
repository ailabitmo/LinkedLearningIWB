== Workflows ==

The fluidOps platform SDK provides various utility methods for performing workflows. The available services are documented in the workflow Javadoc package contained in the ''sdk'' directory of your application.

In the following we document the available functionality be means of examples.


=== Executing SSH commands ===

Consider the following Groovy Script (available for illustration in the ''DemoSolution'' of the SDK in ''scripts/ssh/SSHConnect.groovy''):

<source>
package ssh;

import com.fluidops.iwb.annotation.CallableFromWidget;
import com.fluidops.util.Exec;
import com.fluidops.util.Exec.ExecResult;
import com.fluidops.util.SSH;

/**
 * wrapper class which enables SSH from the wiki
 */
public class SSHConnect
{
	@CallableFromWidget
	public static String exec( String host, String user, String password, String command )
	{
		SSH ssh = new SSH();
		ssh.login(host, user, password);
		ExecResult res = ssh.exec(command);
		ssh.logout();
		return res.out;
	}
}
</source>

This script makes use of the platform's SSH execution framework available in ''com.fluidops.util.SSH;'' (see workflow Javadoc for details).

Such a simple script can be invoked from the wiki using [[Help:CodeExecution| code execution]] functionality, as illustrated in the following.

<source>
{{#widget: CodeExecution
  | clazz = 'ssh.SSHConnect'
  | method = 'exec'
  | args = {{ 'myHost' | 'username' | 'password' | 'echo Hello World' }}
  | passContext = false
}}
</source>

=== Using the Powershell ===

The following example groovy scripts (available for illustration in the ''DemoSolution'' of the SDK in ''scripts/powershell/PS.groovy'') offers two powershell demonstration. Example 1 invokes the powershell script ''hi.ps1'' which in turn writes the String ''Hello World!'' to standard out. The second example shows how user input can be passed to a powershell script.

<source>
package powershell;

import com.fluidops.iwb.annotation.CallableFromWidget;
import com.fluidops.util.Exec;
import com.fluidops.util.Exec.ExecResult;

/**
 * wrapper class which allows calling powershell scripts from the wiki
 */
public class PS {

    @CallableFromWidget
    public static String powershell() {
        // calls this PS script:
        // Write-Host 'Hello World!'
        ExecResult res = Exec.run((String[])["powershell", "-inputformat", "none", "-File", "scripts/powershell/hi.ps1"], null, 0L);
        if (res.exit == 0 && res.err.equals(""))
            return res.out;
        else
            return "command failed with code " + res.exit + ": " + res.err;
    }
    
    @CallableFromWidget
    public static String powershellWithUserInput(String firstname, String lastname) {
        // calls this PS script:
        // Write-Host 'Hello '+firstname+' '+lastname
        ExecResult res = Exec.run((String[])["powershell", "-inputformat", "none", "-File", "scripts/powershell/scriptWithUserInput.ps1", firstname, lastname], null, 0L);
        if (res.exit == 0 && res.err.equals(""))
            return res.out;
        else
            return "command failed with code " + res.exit + ": " + res.err;
    }    
}
</source>

'''Example 1:''' a simple ''Hello World'' script

''scripts/powershell/hi.ps1''

<source>
Write-Host 'Hello World!'
</source>

Again, the examples can be invoked from the wiki using [[Help:CodeExecution| code execution]] functionality, as illustrated below.


<source>
{{#widget: CodeExecution | 
 passContext = false
 | method = 'powershell'
 | label = 'Hello World'
 | clazz = 'powershell.PS'
}}
</source>


'''Example 2: a simple script which takes user input'''

''scripts/powershell/scriptWithUserInput.ps1''

<source>
Param(
	[parameter(Mandatory=$true)]
	[string]$arg1, #argument1
	[string]$arg2 #argument2

)
Write-Host "Hello " $arg1 " " $arg2
</source>

Embedding the invocation into a wiki page using [[Help:CodeExecution| code execution]] functionality.

<source>
{{#widget: CodeExecution | 
 passContext = false
 | args = {{ '%firstname' | '%lastname' }}
 | userInput = {{ 
      {{ name = 'firstname'
       | componentType = 'SIMPLE'
      }} | 
      {{ name = 'lastname'
       | componentType = 'SIMPLE'
      }} }}
 | method = 'powershellWithUserInput'
 | label = 'Powershell with User Input'
 | clazz = 'powershell.PS'
}}
</source>
