=== Code Execution Widget ===

==== Functionality ====
{{#widget: com.fluidops.iwb.widget.DisplayConfigurationWidget
| clazz = 'com.fluidops.iwb.widget.CodeExecutionWidget'
| type = 'DESCRIPTION'
}}

The widget allows to invoke Java or Groovy methods. Arguments can be specified using the {{PRODUCT}} operator notation or they are provided by the user. Exposed methods in Java or Groovy code must be annotated with the ''@CallableFromWidget'' annotation, e.g. 

<source>
@CallableFromWidget
public static String testMe(String param, Value a, List<Value> b, List<Value> x)
</source>

Groovy scripts must reside in the fiwb/scripts folder of the current installation, where sub-directories correspond to the package structure.

It is possible to pass a ''CodeExecutionContext'' object to the called method as first argument to provide information about the caller. In the widget configuration, ''passContext'' needs to be set to ''true''. Consequently, the context is automatically passed as first argument.

Please refer to the [[Help:AdvancedWidgetConfiguration| advanced widget configuration]] documentation for details on how to represent the actual arguments of the method invocation, i.e. typing, casting tables and default values etc.

Below we illustrate functionality using a bunch of examples.

Go back to [[Help:Widgets | Widgets ]]

==== Configuration Settings ====

{{#widget: com.fluidops.iwb.widget.DisplayConfigurationWidget
| clazz = 'com.fluidops.iwb.widget.CodeExecutionWidget'
}}

===== User Input Configuration =====

{{#widget: com.fluidops.iwb.widget.DisplayConfigurationWidget
| clazz = 'com.fluidops.iwb.service.CodeExecution$UserInputConfig'
}}

==== Example ====


'''a) Simple invocation'''

Signature: ''com.fluidops.iwb.widget.CodeExecutionWidget.testMe(String)''

<source>
{{#widget: CodeExecution
| label = 'Do Something'
| clazz = 'com.fluidops.iwb.widget.CodeExecutionWidget'
| method = 'testMe'
| args = {{ 'Constant' }}
}}
</source>


'''b) Simple invocation + confirmation message + reload after invocation'''

Signature: ''com.fluidops.iwb.widget.CodeExecutionWidget.testMe(String)''

<source>
{{#widget: CodeExecution
| label = 'Test 2'
| clazz = 'com.fluidops.iwb.widget.CodeExecutionWidget'
| method = 'testMe'
| args = {{ 'Constant' }}
| confirm = 'Do you really want to execute testMe()'
| onFinish = 'reload'
}}
</source>


'''c) Simple invocation + redirect to resource'''

Signature: ''com.fluidops.iwb.widget.CodeExecutionWidget.testMe(String)''

<source>
{{#widget: CodeExecution
| label = 'Test 3'
| clazz = 'com.fluidops.iwb.widget.CodeExecutionWidget'
| method = 'testMe'
| args = {{ 'Constant' }}
| onFinish = $this.a$
}}
</source>

'''d) Simple invocation + redirect to Help:Start'''

Signature: ''com.fluidops.iwb.widget.CodeExecutionWidget.testMe(String)''

<source>
{{#widget: CodeExecution
| label = 'Test 4'
| clazz = 'com.fluidops.iwb.widget.CodeExecutionWidget'
| method = 'testMe'
| args = {{ 'Constant'}}
| onFinish = 'Help:Start'
}}
</source>


'''e) Simple invocation + component rendered as image'''

Signature: ''com.fluidops.iwb.widget.CodeExecutionWidget.testMe(String)''

<source>
{{#widget: CodeExecution
| render = 'img:/ajax/icons/edit.png'
| label = 'Test 6'
| clazz = 'com.fluidops.iwb.widget.CodeExecutionWidget'
| method = 'testMe'
| args = {{ 'Constant' }}
}}
</source>


'''f) Simple invocation of Groovy service'''

Signature: ''hello(CodeExecutionContext, String arg)''

<source>
{{#widget: CodeExecution 
| label = 'Test Groovy'
| clazz = 'dyn.GroovyTest' 
| method = 'hello' 
| args = {{ 'abc' }}
| passContext = true
}}
</source>

'''g) Using dynamic operators as arguments'''

Dynamic operators are a powerful concept of the {{PRODUCT}} to access data from the database in the widget configuration. Before using dynamic operators please read the documentation of the concept at [[Help:AdvancedWidgetConfiguration]]. In particular, make sure that you understand the supported implicit castings and the return values for each operator (see casting table on [[Help:AdvancedWidgetConfiguration]]).

For dynamic operators it is recommended to use the most specific type in the signature of your method, as illustrated in the following examples:

{| class="wikitable"
| '''Signature'''
| '''Arguments'''
| '''Description'''
|-
| testMe(URI currentResource)
| ''$''this<i>$</i>
| The URI of the current resource 
|-
| testMe(List<Value> outgoingProps)
| ''$''this.x<i>$</i>
| A list of outgoing values for property x 
|-
| testMe(List<Value> outgoingProps)
| ''$''SELECT ?x WHERE { ?? :x ?x }}<i>$</i>
| A list of values for first projection of query, i.e. variable ?x 
|-
| testMe(Value outgoingProp)
| ''$''this.x<i>$</i>
| A random Value from outgoing property x
|-
| testMe(Value outgoingProp)
| ''$''SELECT ?x WHERE { ?? :x ?x }}<i>$</i>
| A random Value from first projection of query, i.e. variable ?x 
|-
| testMe(Object o)
| 
| The actual type depends on the the operator used, e.g. ''$''this.x<i>$</i> results in List<nowiki><Value></nowiki>
|}


'''h) Using multiple arguments'''

The widget allows to pass multiple arguments to a method invocation using the | symbol as separator in the argument specification. 

Note: for coded execution method names must be distinct in the given class, in particular, no overloading is supported.

Signature: ''com.fluidops.iwb.widget.CodeExecutionWidget.testMe(String, URI, Value, List<nowiki><Value></nowiki>)''

<source>
{{#widget: CodeExecution
| label = 'Do Something'
| clazz = 'com.fluidops.iwb.widget.CodeExecutionWidget'
| method = 'testMe'
| args = {{ 'Constant' | $this$ | $this.x$ |$select ?x where { ?? ?p ?x }$ }}
}}
</source>

'''i) Simple invocation with List<nowiki><Value></nowiki> as argument'''

Signature: ''alertValues(CodeExecutionContext, List<nowiki><Value></nowiki> list)''

*using ''$''this.x<i>$</i> notation

<source>
{{#widget: CodeExecution 
| label = 'Test List<Value>'
| clazz = 'dyn.GroovyTest' 
| method = 'alertValues' 
| args = {{ $this.x$ }}
| passContext = true
}} 
</source>

* using $SELECT ..$ notation

<source>
{{#widget: CodeExecution 
| label = 'Test List<Value>'
| clazz = 'dyn.GroovyTest' 
| method = 'alertValues' 
| args = {{ $SELECT ?v WHERE { ?? :b ?v } $ }}
| passContext = true
}} 
</source>

'''j) User input'''

The following widget shows how to parameterize method invocations with user input. The list of arguments contains two input parameters which are bound by a simple text field and a dropdown box respectively. When the user clicks the button, a form shows up where he can enter the parameter values.

Signature: ''com.fluidops.iwb.widget.CodeExecutionWidget.testMe(String, Value, Value)''

<source>
{{#widget: CodeExecution
 | label = 'Test User Input'
 | clazz = 'com.fluidops.iwb.widget.CodeExecutionWidget'
 | method = 'testMe'
 | args = {{ '%name' | '<http://www.fluidops.com/Constant>' | '%type' }}
 | userInput = {{ 
      {{ name = 'name'
       | displayName = 'Nice Name'
       | required = false
       | componentType = 'SIMPLE'
       | presetValue = 'Hello World'
      }} | 
      {{ name = 'type'
       | componentType = 'DROPDOWN'
       | selectValues = $select distinct ?type where { ?x rdf:type ?type }$
      }} }}
}}
</source>

'''k) Render mode 'inline' '''

The following widget shows a text field for user input directly on the page (instead of in a popup).

Signature: ''com.fluidops.iwb.widget.CodeExecutionWidget.testMe(String, Value, Value)''

<source>
{{#widget: CodeExecution
 | render = 'inline'
 | clazz = 'com.fluidops.iwb.widget.CodeExecutionWidget'
 | method = 'testMe'
 | args = {{ '%Message' | '<http://www.fluidops.com/Constant>' | '<http://www.fluidops.com/Constant>' }}
 | userInput = {{ 
      {{ name = 'Message'
       | componentType = 'SIMPLE'
      }} }}
}}
</source>