== Value resolver extensions ==

<p style="color:red">

'''WARNING: this is an experimental feature and the mechanism might be changed in a future version'''

</p>

The [[Help:ValueResolvers| value resolver framework]] is designed with extensibility in mind, i.e., it is easily possible to register custom value resolvers through the Java Service Loader mechanism. Below, we describe in detail how custom value resolvers can be added to the platform using the following steps.

# Implement the custom value resolver as a Java class
# Implement a value resolver factory for your implementation
# Register your value resolver factory to META-INF services


=== Implementation of the value resolver ===

The value resolver itself is a Java class exposing its functionality through public functions as defined in the abstract ''ValueResolver'' class. Hence, the first step is to create a new Java class which extends from ''com.fluidops.iwb.api.valueresolver.ValueResolver''.

Notes:

* The name of the value resolver provided in the constructor must be unique in the system. In addition, it must adhere to the naming rules for Java fields.
* It is recommended to give a meaningful description using the ''#description()'' method

Consider the ''BoldValueResolver'' example below as illustration.

<source>
/**
 * Example value resolver which prints the default
 * representation as <b>bold</b> font.
 */
public class BoldValueResolver extends ValueResolver {

	public static final String BOLD = "BOLD";
	
	public BoldValueResolver() {
		super(BOLD);
	}

	@Override
	public String handle(Value value) {
		return "<b>" + ValueResolverUtil.resolveDefault(value) + "</b>";
	}
}
</source>

=== Implementation of the value resolver factory ===

The value factory is a Java class that is used to instantiate your value resolver implementation. The class must implement the ''com.fluidops.iwb.api.valueresolver.ValueResolverFactory'' interface, and provide a default constructor. 

Consider the example below as an illustration.

<source>
/**
 * A {@link ValueResolverFactory} for the {@link BoldValueResolver}.
 */
public class BoldValueResolverFactory implements ValueResolverFactory {

	@Override
	public ValueResolver create() {
		return new BoldValueResolver();
	}
}
</source>

=== Registering the value resolver ===

In the {{PRODUCT}} we use the [http://docs.oracle.com/javase/6/docs/api/java/util/ServiceLoader.html Java SPI mechanism] to register the value resolver factory implementations which are then used to instantiate the particular value resolvers. The value resolver factory implementation needs to be registered in the ''META-INF/services'' location. 

If not present, create a file ''META-INF/services/com.fluidops.iwb.api.valueresolver.ValueResolverFactory'' and specify the fully qualified classname of your value resolver factory (one item per line). The final step to do is to put your services on the classpath of the {{PRODUCT}}, e.g. as a [[Help:Solutions | solution]]. These service factories are then picked up by Java's ''ServiceLoader'' at startup of the {{PRODUCT}}, and registered as to the platform.

Consider the following example as illustration:

<source>
com.fluidops.iwb.api.valueresolver.BoldValueResolverFactory
</source>

Once the service is registered, it can be accessed as a [[Help:ValueResolvers| value resolver]], e.g. from the [[Help:AdvancedWikiSyntax| show-parser function]] or from [[Help:TableResult| table result widgets]]:

<source>
{{#show: {{this}} | :prop | valueResolver=BOLD }}
</source>